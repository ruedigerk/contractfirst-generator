package io.github.ruedigerk.contractfirst.generator.compat_1_7_test

import io.github.ruedigerk.contractfirst.generator.compat_1_7_test.spec.EmbeddedJaxRsServerSpecification
import io.github.ruedigerk.contractfirst.generator.integrationtest.generated.compat_1_7.client.api.MultipartRequestBodyApiClient
import io.github.ruedigerk.contractfirst.generator.integrationtest.generated.compat_1_7.client.model.CMultipartRequestBodyRequestBodyMultipartFormDataObjectProperty
import org.glassfish.jersey.media.multipart.FormDataBodyPart
import org.glassfish.jersey.media.multipart.FormDataParam
import spock.lang.Subject

import javax.ws.rs.Consumes
import javax.ws.rs.FormParam
import javax.ws.rs.POST
import javax.ws.rs.Path

/**
 * Tests the compatibility of the client code generated by version 1.7 against the client-support-dependency in versions > 1.7.
 *
 * The test is only run when system property "CFG_COMPATIBILITY" has a value of at least 1.7.
 */
class MultipartRequestBodyClientCompat_1_7Test extends EmbeddedJaxRsServerSpecification {

  @Subject
  MultipartRequestBodyApiClient apiClient = new MultipartRequestBodyApiClient(apiClientSupport)

  @Override
  Class<?> getTestResource() {
    EmbeddedServerResource
  }

  def "Test multipart form data request body"() {
    when:
    def result = apiClient.returningResult().multipartRequestBody(
        "a&1",
        42L,
        new CMultipartRequestBodyRequestBodyMultipartFormDataObjectProperty(a: "string", b: 23L),
        getSamplePdfAsInputStream(),
        [
            getSamplePdfAsInputStream(),
            getSamplePdfAsInputStream(),
        ]
    )

    then:
    result.isStatus204WithoutEntity()
  }

  static private InputStream getSamplePdfAsInputStream() {
    MultipartRequestBodyClientCompat_1_7Test.getResourceAsStream("/sample.pdf")
  }

  /**
   * JAX-RS resource implementation used in this test.
   *
   * See here, how Jersey handles multipart request bodies (unfortunately, multipart request bodies are not handled by the JAX-RS spec):
   * https://eclipse-ee4j.github.io/jersey.github.io/documentation/latest/media.html#multipart
   */
  @Path("")
  static class EmbeddedServerResource {

    @POST
    @Path("/formEncodedRequestBody")
    @Consumes("application/x-www-form-urlencoded")
    void formEncodedRequestBody(
        @FormParam("stringProperty") String stringProperty,
        @FormParam("integerProperty") String integerProperty,
        @FormParam("enumProperty") String enumProperty
    ) {
      assert stringProperty == "a&1"
      assert integerProperty == "42"
      assert enumProperty == "second%value"
    }

    @POST
    @Path("/multipartRequestBody")
    @Consumes("multipart/form-data")
    void multipartRequestBody(
        @FormDataParam("stringProperty") String stringProperty,
        @FormDataParam("integerProperty") Long integerProperty,
        @FormDataParam("objectProperty") SMultipartRequestBodyRequestBodyMultipartFormDataObjectProperty objectProperty,
        @FormDataParam("firstBinary") FormDataBodyPart firstBinary,
        @FormDataParam("additionalBinaries") List<FormDataBodyPart> additionalBinaries
    ) {
      // objectProperty and additionalBinaries are not tested, because they contain nonsense as the client doesn't support these cases.
      assert stringProperty == "a&1"
      assert integerProperty == 42L
      assert objectProperty == null
      assert firstBinary.getValueAs(byte[]) == getSamplePdfAsInputStream().bytes
    }
  }
}
