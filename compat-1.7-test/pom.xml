<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
   <modelVersion>4.0.0</modelVersion>

   <artifactId>contractfirst-generator-compat-1.7-test</artifactId>

   <description>
      This module contains backwards compatibility tests for the generator, i.e. tests that the code generated with version 1.7
      of the generator runs with the latest version of the client-support JAR.
   </description>

   <parent>
      <groupId>io.github.ruedigerk.contractfirst.generator</groupId>
      <artifactId>contractfirst-generator-parent</artifactId>
      <version>1.7.1-SNAPSHOT</version>
   </parent>

   <properties>
      <!-- Skip install and deploy -->
      <maven.install.skip>true</maven.install.skip>
      <maven.deploy.skip>true</maven.deploy.skip>

      <!-- Skip GPG Signing -->
      <gpg.skip>true</gpg.skip>

      <!-- Skip Javadoc and source JAR generation -->
      <maven.javadoc.skip>true</maven.javadoc.skip>
      <maven.source.skip>true</maven.source.skip>
   </properties>

   <build>
      <plugins>
         <plugin>
            <!-- Compile Java sources -->
            <artifactId>maven-compiler-plugin</artifactId>
         </plugin>

         <plugin>
            <!-- Groovy-Plugin for testing with Spock -->
            <groupId>org.codehaus.gmavenplus</groupId>
            <artifactId>gmavenplus-plugin</artifactId>
         </plugin>

         <plugin>
            <!-- The generator in version 1.7 for testing backwards compatibility of the client-support JAR -->
            <!-- Unfortunately, this version of the generator wasn't able to   -->
            <artifactId>contractfirst-generator-maven-plugin</artifactId>
            <groupId>io.github.ruedigerk.contractfirst.generator</groupId>
            <version>1.7.0</version>
            <executions>
               <execution>
                  <id>generate-testsuite-client-code-compat-1.7</id>
                  <goals>
                     <goal>generate</goal>
                  </goals>
                  <configuration>
                     <generator>client</generator>
                     <inputContractFile>${project.basedir}/src/main/contract/testsuite.yaml</inputContractFile>
                     <outputDir>${project.build.directory}/generated-sources/compat-1.7</outputDir>
                     <outputJavaBasePackage>io.github.ruedigerk.contractfirst.generator.integrationtest.generated.compat_1_7.client</outputJavaBasePackage>
                     <outputJavaModelNamePrefix>C</outputJavaModelNamePrefix>
                  </configuration>
               </execution>
            </executions>
         </plugin>
      </plugins>
   </build>

   <dependencies>
      <!-- #################### -->
      <!-- Compile dependencies -->
      <!-- #################### -->

      <!-- Dependencies of the generated server code -->
      <dependency>
         <groupId>io.github.ruedigerk.contractfirst.generator</groupId>
         <artifactId>contractfirst-generator-server-support</artifactId>
         <version>${project.version}</version>
      </dependency>
      <dependency>
         <groupId>javax.ws.rs</groupId>
         <artifactId>javax.ws.rs-api</artifactId>
         <version>${jax-rs.version}</version>
      </dependency>
      <dependency>
         <groupId>javax.validation</groupId>
         <artifactId>validation-api</artifactId>
         <version>${bean-validation.version}</version>
      </dependency>
      <dependency>
         <groupId>com.google.code.gson</groupId>
         <artifactId>gson</artifactId>
         <version>${gson.version}</version>
      </dependency>
      <dependency>
         <groupId>com.google.code.findbugs</groupId>
         <artifactId>jsr305</artifactId>
         <version>3.0.2</version>
      </dependency>

      <!-- Dependencies of the generated client code -->
      <dependency>
         <groupId>io.github.ruedigerk.contractfirst.generator</groupId>
         <artifactId>contractfirst-generator-client-support</artifactId>
         <version>${project.version}</version>
      </dependency>

      <!-- ################# -->
      <!-- Test dependencies -->
      <!-- ################# -->
      <dependency>
         <!-- To redirect JDK logging used by Grizzly server to slf4j -->
         <groupId>org.slf4j</groupId>
         <artifactId>jul-to-slf4j</artifactId>
         <version>${slf4j.version}</version>
         <scope>test</scope>
      </dependency>
      <dependency>
         <!-- To suppress Grizzly logging in tests -->
         <groupId>org.slf4j</groupId>
         <artifactId>slf4j-nop</artifactId>
         <version>${slf4j.version}</version>
         <scope>test</scope>
      </dependency>
      <dependency>
         <!-- For testing with Spock -->
         <groupId>org.codehaus.groovy</groupId>
         <artifactId>groovy</artifactId>
         <version>${groovy.version}</version>
         <scope>test</scope>
      </dependency>
      <dependency>
         <!-- For testing with Spock -->
         <groupId>org.spockframework</groupId>
         <artifactId>spock-core</artifactId>
         <version>${spock.version}</version>
         <scope>test</scope>
      </dependency>
      <dependency>
         <!-- Allows mocking of classes in Spock (in addition to interfaces). -->
         <groupId>net.bytebuddy</groupId>
         <artifactId>byte-buddy</artifactId>
         <version>${byte-buddy.version}</version>
         <scope>test</scope>
      </dependency>
      <dependency>
         <!-- Allows mocking of classes without default constructor in Spock (together with ByteBuddy). -->
         <groupId>org.objenesis</groupId>
         <artifactId>objenesis</artifactId>
         <version>${objenesis.version}</version>
         <scope>test</scope>
      </dependency>

      <!-- Testing with embedded Jersey JAX-RS Server -->
      <dependency>
         <!-- Grizzly based Jersey test container -->
         <groupId>org.glassfish.jersey.containers</groupId>
         <artifactId>jersey-container-grizzly2-http</artifactId>
         <version>${jersey.version}</version>
         <scope>test</scope>
      </dependency>
      <dependency>
         <!-- Another dependency of the embedded Jersey container -->
         <groupId>org.glassfish.jersey.inject</groupId>
         <artifactId>jersey-hk2</artifactId>
         <version>${jersey.version}</version>
         <scope>test</scope>
      </dependency>
      <dependency>
         <!-- So that Jersey is able to handle multipart requests -->
         <groupId>org.glassfish.jersey.media</groupId>
         <artifactId>jersey-media-multipart</artifactId>
         <version>${jersey.version}</version>
         <scope>test</scope>
      </dependency>
   </dependencies>

</project>
