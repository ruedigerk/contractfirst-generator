<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
   <modelVersion>4.0.0</modelVersion>

   <artifactId>openapi-codegen-integration-test</artifactId>

   <description>
      This module is used as an integration test of the generator. The Maven plugin is
      used to generate client and server and the generated code is test via an embedded
      JAX-RS server implementation.
   </description>

   <parent>
      <groupId>de.rk42.openapi-codegen</groupId>
      <artifactId>openapi-codegen-parent</artifactId>
      <version>1.0-SNAPSHOT</version>
   </parent>

   <properties>
      <!-- Skip creating a JAR file, as this  module does not contain production code -->
      <jar.skipIfEmpty>true</jar.skipIfEmpty>

      <!-- Skip install and deploy -->
      <maven.install.skip>true</maven.install.skip>
      <maven.deploy.skip>true</maven.deploy.skip>

      <!-- Skip Javadoc and source JAR generation -->
      <maven.javadoc.skip>true</maven.javadoc.skip>
      <maven.source.skip>true</maven.source.skip>

      <!-- Dependency versions -->
      <jersey.version>2.34</jersey.version>
   </properties>

   <build>
      <plugins>
         <plugin>
            <!-- Java compiler needs to run after Kotlin compiler, see https://kotlinlang.org/docs/maven.html#compile-kotlin-and-java-sources -->
            <artifactId>maven-compiler-plugin</artifactId>
         </plugin>

         <plugin>
            <!-- Groovy-Plugin for testing with Spock -->
            <groupId>org.codehaus.gmavenplus</groupId>
            <artifactId>gmavenplus-plugin</artifactId>
         </plugin>

         <plugin>
            <artifactId>openapi-codegen-maven-plugin</artifactId>
            <groupId>de.rk42.openapi-codegen</groupId>
            <version>${project.version}</version>
            <executions>
               <execution>
                  <id>generate-server-code</id>
                  <goals>
                     <goal>generate</goal>
                  </goals>
                  <configuration>
                     <generator>server</generator>
                     <sourcePackage>de.rk42.openapi.codegen.integrationtest.generated.server</sourcePackage>
                     <modelPrefix>S</modelPrefix>
                  </configuration>
               </execution>
               <execution>
                  <id>generate-client-code</id>
                  <goals>
                     <goal>generate</goal>
                  </goals>
                  <configuration>
                     <generator>client</generator>
                     <sourcePackage>de.rk42.openapi.codegen.integrationtest.generated.client</sourcePackage>
                     <modelPrefix>C</modelPrefix>
                  </configuration>
               </execution>
            </executions>
            <configuration>
               <contractFile>${project.basedir}/src/main/contract/testsuite.yaml</contractFile>
            </configuration>
         </plugin>
      </plugins>
   </build>

   <dependencies>
      <!-- #################### -->
      <!-- Compile dependencies -->
      <!-- #################### -->

      <!-- Dependencies of the generated server code -->
      <dependency>
         <groupId>javax.ws.rs</groupId>
         <artifactId>javax.ws.rs-api</artifactId>
         <version>${jax-rs.version}</version>
      </dependency>
      <dependency>
         <groupId>javax.validation</groupId>
         <artifactId>validation-api</artifactId>
         <version>${bean-validation.version}</version>
      </dependency>
      <dependency>
         <groupId>com.google.code.gson</groupId>
         <artifactId>gson</artifactId>
         <version>${gson.version}</version>
      </dependency>

      <!-- Dependencies of the generated client code -->
      <dependency>
         <groupId>de.rk42.openapi-codegen</groupId>
         <artifactId>openapi-codegen-client-support</artifactId>
         <version>${project.version}</version>
      </dependency>

      <!-- ################# -->
      <!-- Test dependencies -->
      <!-- ################# -->
      <dependency>
         <!-- For testing with Spock -->
         <groupId>junit</groupId>
         <artifactId>junit</artifactId>
         <version>${junit.version}</version>
         <scope>test</scope>
      </dependency>
      <dependency>
         <!-- To redirect JDK logging used by Grizzly server to slf4j -->
         <groupId>org.slf4j</groupId>
         <artifactId>jul-to-slf4j</artifactId>
         <version>${slf4j.version}</version>
         <scope>test</scope>
      </dependency>
      <dependency>
         <!-- To suppress Grizzly logging in tests -->
         <groupId>org.slf4j</groupId>
         <artifactId>slf4j-nop</artifactId>
         <version>${slf4j.version}</version>
         <scope>test</scope>
      </dependency>
      <dependency>
         <!-- For testing with Spock -->
         <groupId>org.codehaus.groovy</groupId>
         <artifactId>groovy</artifactId>
         <version>${groovy.version}</version>
         <scope>test</scope>
      </dependency>
      <dependency>
         <!-- For testing with Spock -->
         <groupId>org.spockframework</groupId>
         <artifactId>spock-core</artifactId>
         <version>${spock.version}</version>
         <scope>test</scope>
      </dependency>
      <dependency>
         <!-- Allows mocking of classes in Spock (in addition to interfaces). -->
         <groupId>net.bytebuddy</groupId>
         <artifactId>byte-buddy</artifactId>
         <version>${byte-buddy.version}</version>
         <scope>test</scope>
      </dependency>
      <dependency>
         <!-- Allows mocking of classes without default constructor in Spock (together with ByteBuddy). -->
         <groupId>org.objenesis</groupId>
         <artifactId>objenesis</artifactId>
         <version>${objenesis.version}</version>
         <scope>test</scope>
      </dependency>

      <!-- Testing with embedded Jersey JAX-RS Server -->
      <dependency>
         <!-- Grizzly based Jersey test container -->
         <groupId>org.glassfish.jersey.containers</groupId>
         <artifactId>jersey-container-grizzly2-http</artifactId>
         <version>${jersey.version}</version>
         <scope>test</scope>
      </dependency>
      <dependency>
         <!-- Another dependency of the embedded Jersey container -->
         <groupId>org.glassfish.jersey.inject</groupId>
         <artifactId>jersey-hk2</artifactId>
         <version>${jersey.version}</version>
         <scope>test</scope>
      </dependency>
   </dependencies>

</project>
