openapi: "3.0.0"
info:
  version: 1.0.0
  title: Test suite for the client and server code generator
servers:
  - url: https://example.com/v1
paths:
  /{petStoreId}/pets:
    post:
      summary: Test for the various parameter locations and for serializing request and response body entities.
      operationId: createPet
      tags:
        - ResponseVariants
      parameters:
        - name: petStoreId
          in: path
          description: ID of pet store
          required: true
          schema:
            type: string
        - name: dryRun
          in: query
          description: Do a dry run?
          required: false
          schema:
            type: boolean
        - name: customerId
          in: header
          description: Optional customer ID
          required: false
          schema:
            type: integer
            format: int64
        - name: testCaseSelector
          in: header
          description: Used to select the desired behaviour of the server in the test.
          required: false
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Pet"
      responses:
        200:
          description: Return created pet
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
        201:
          description: Accepted, also empty response.
        204:
          description: Empty response
        400:
          description: Error, customer ID unknown
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /pets:
    post:
      summary: Test operation for generating generic types, e.g. List of Pet.
      operationId: filterPets
      tags:
        - PayloadVariants
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Pet"
      responses:
        200:
          description: Returned filtered pets.
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: "#/components/schemas/Pet"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /petBinaries:
    post:
      summary: Test for 204 response.
      operationId: changePet
      tags:
        - PayloadVariants
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Pet"
      responses:
        204:
          description: Ok
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    put:
      summary: Test binary input and output.
      operationId: uploadAndReturnBinary
      tags:
        - PayloadVariants
      requestBody:
        required: true
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        200:
          description: Returned binary data.
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /manuals:
    get:
      summary: Test case for multiple response content types with different schemas.
      operationId: getManual
      tags:
        - MultipleContentTypes
      parameters:
        - name: testCaseSelector
          in: header
          description: Used to select the desired behaviour of the server in the test.
          required: false
          schema:
            type: string
      responses:
        200:
          description: Returned requested Manual.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Manual"
            application/pdf:
              schema:
                type: string
                format: binary
        202:
          description: Returned a pet instead, also test wildcard content type.
          content: 
            text/plain:
              schema: 
                type: string
        204:
          description: Return nothing.
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /wildcardContentTypes:
    get:
      summary: Test wildcard response content types.
      operationId: getWildcardContentTypes
      tags:
        - WildcardContentTypes
      parameters:
        - name: testCaseSelector
          in: header
          description: Used to select the desired behaviour of the server in the test.
          required: false
          schema:
            type: string
      responses:
        200:
          description: Returned some content.
          content:
            text/*:
              schema:
                type: string
            application/*:
              schema:
                type: string
                format: binary
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /time/{timeId}:
    post:
      summary: For testing handling of date and date-time formats.
      operationId: updateTime
      tags:
        - time
      parameters:
        - name: timeId
          in: path
          required: true
          schema:
            type: string
            format: date
        - name: queryTimeA
          in: query
          required: true
          schema:
            type: string
            format: date
        - name: queryTimeB
          in: query
          required: true
          schema:
            type: string
            format: date-time
        - name: headerTimeA
          in: header
          required: true
          schema:
            type: string
            format: date
        - name: headerTimeB
          in: header
          required: true
          schema:
            type: string
            format: date-time
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Clock"
      responses:
        200:
          description: Returned a clock.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClockResponse"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    Pet:
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        tag:
          type: string
    Manual:
      type: object
      required: 
        - title
        - content
      properties: 
        title:
          type: string
        content:
          type: string
    Clock:
      type: object
      required:
        - time1
        - time2
      properties:
        time1:
          type: string
          format: date
        time2:
          type: string
          format: date-time
    ClockResponse:
      type: object
      properties:
        time1:
          type: string
          format: date
        time2:
          type: string
          format: date-time
        pathTime:
          type: string
          format: date
        queryTime1:
          type: string
          format: date
        queryTime2:
          type: string
          format: date-time
        headerTime1:
          type: string
          format: date
        headerTime2:
          type: string
          format: date-time
    Error:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    